# BddFeatures
bddfeatures_registrationfeaturecoding:
    question: >
        You've assembled a crack team for a brand new project:
        a site where paleontologists and other dinosaur scientists
        can send each other important scientific messages, along
        with the usual cat photos.

        Each scientist will need to register to gain access, and
        you - knowing that using BDD will create a better product -
        are writing a registration feature. Fill in the 4 feature
        lines in `registration.feature`.
    step: ~
    files:
        registration.feature: ~
    features:
        editor: ~
        browser: ~
    grading:
#        $this->assertLineStartsWith(
#            $lines,
#            'Feature:',
#            'a short feature description',
#            0,
#            false
#        );
        check_line_1:
            type: behat
            # @TODO Implement file() function with ability to get specified line for Behat expression provider
            assertTrue: file('registration.feature').line(1) matches /^Feature:/
            failure: a short feature description
#        $this->assertLineStartsWith(
#            $lines,
#            'In order to',
#            'your *business* value',
#            1,
#            true
#        );
        check_line_2:
            type: behat
            assertTrue: file('registration.feature').line(2) matches /^In order to/
            failure: your *business* value
#        $this->assertLineStartsWith(
#            $lines,
#            'As a',
#            '*who* will benefit from the feature',
#            2,
#            true
#        );
        check_line_3:
            type: behat
            assertTrue: file('registration.feature').line(3) matches /^As a/
            failure: your *business* value
#        $this->assertLineStartsWith(
#            $lines,
#            'I need to be able to',
#            'a short description of what the user will do with the feature',
#            3,
#            true
#        );
        check_line_4:
            type: behat
            assertTrue: file('registration.feature').line(4) matches /^I need to be able to/
            failure: a short description of what the user will do with the feature

bddfeatures_bestbusinessvaluemc: ~
    question: >
        For the messaging feature, you and the intern (Bob) are in
        a heated debate over how to phrase the business value.
        Which if the following is the *best* business value for the
        message feature:
    explanation: >
        Business value is subjective. But to help, forget about the technology
        and think about the problem that your user role (scientist) wants to
        solve. Both "communicate" and "exchange information and resources"
        are pretty good business values, but I like the second, because it
        contains a few more details about what the scientists actually
        want to do.
    features:
        multiple_choice:
            choices:
                a: In order to type messages and click to send them to scientists.
                b: In order to communicate with other scientists.
                c: In order to exchange information and resources with other scientists.
                d: In order to send cat videos.
            correct: c
