# BddFeatures
bddfeatures_registrationfeaturecoding:
    question: |
        You've assembled a crack team for a brand new project:
        a site where paleontologists and other dinosaur scientists
        can send each other important scientific messages, along
        with the usual cat photos.

        Each scientist will need to register to gain access, and
        you - knowing that using BDD will create a better product -
        are writing a registration feature.
    explanation: |
        As long as you have the right format, and really focused on
        *why* you're working on this feature (i.e. the business value),
        you're in great shape. If you're curious, here's our answer:

        ```gherkin
        Feature: Registration
          In order to send and receive messages from scientists I know
          As a scientist
          I need to be able to register for a new account
        ```
    question_steps:
        - Write the 4 feature lines in `registration.feature`, doing your best to focus on the business value!
    step: 'bdd-features-registration-feature-coding'
    files:
        registration.feature: ~
    features:
        editor: ~
        browser:
            default_uri: /grade.php
            visible: false
    grading:
        check_line_1:
            type: behat
            assertTrue: "file('registration.feature').line(1).startsWith('Feature:')"
            failure: On line 1, start with `Feature:` and then a short description of the feature.
        check_line_2:
            type: behat
            assertTrue: "file('registration.feature').line(2).startsWith('  In order to')"
            failure: Make sure line 2 is indented with *2* spaces, followed by `In order to` and then the *business* value this feature brings.
        check_line_3:
            type: behat
            assertTrue: "file('registration.feature').line(3).startsWith('  As a')"
            failure: Indent line 3 two spaces and then write `As a` followed by *who* will benefit from this feature.
        check_line_4:
            type: behat
            assertTrue: "file('registration.feature').line(4).startsWith('  I need to be able to')"
            failure: Also indent line 4 two spaces, and then write `I need to be able to` followed by a short description of what the above user will do with this feature.

bddfeatures_bestbusinessvaluemc:
    question: |
        For the messaging feature, you and the intern (Bob) are in
        a heated debate over how to phrase the business value.
        Which of the following is the *best* business value for the
        message feature:
    explanation: |
        Business value is subjective. But to help with this: forget about the technology
        and instead think about the problem that your user role (the scientist) wants to
        solve. Both "communicate" and "exchange information and resources"
        are pretty good business values, but I like the second, because it
        contains a few more details about what the scientists actually
        want to do. However, we also realize that most people will probably
        just send cat videos. <span class="fa fa-paw"></span>
    features:
        multiple_choice:
            choices:
                a: In order to type messages and click to send them to scientists.
                b: In order to communicate with other scientists.
                c: In order to exchange information and resources with other scientists.
                d: In order to send cat videos.
            correct: c

# Scenarios
scenarios_registrationscenariocoding:
    question: |
        After writing the feature for registration, the whole team
        (even Bob the intern!) is excited about BDD!

        Time to write your first scenario for registration. **Add
        a scenario that reflects the user story described**. The
        most important thing is to use natural language!
    question_steps:
        - 'Write a scenario that describes this user story:'
        - You start on the homepage
        - You click a link called "Register"
        - You fill out an "Email" field and a "Password" field
        - You press a "Register" button
        - You see some text on the page, like "Hi Dr. Paleontology Person! Welcome!"
    explanation: |
        The most important thing - other than getting the *format* correct -
        is to use *natural* language from the point of view of the user
        in the `As a ` feature line. Here's our solution:

        ```gherkin
        Scenario: Successfully register
          Given I am on "/"
          When I click "Register"
          And I fill in "Email" with "dr_dino@example.com"
          And I fill in "Password" with "r00000ar"
          And I press "Register"
          Then I should see "Hi Dr. Paleontology Person! Welcome!"
        ```

    # uses the solution step from the previous challenge
    step: bdd-features-registration-feature-coding-solution
    files:
        registration.feature: ~
    features:
        editor: ~
        browser:
            default_uri: /grade.php
            visible: false
    grading:
        check_scenarios:
            type: behat
            assertTrue: feature('registration.feature').hasScenarios()
            failure: "I don't see *any* scenarios. Make sure you added a `Scenario: <some title>` line for the scenario."
        check_scenario_title:
            type: behat
            assertFalse: feature('registration.feature').getScenario(1).getTitle() == ''
            failure: Make sure to put a short title after your scenario
        check_given:
            type: behat
            assertTrue: feature('registration.feature').getScenario(1).hasStepType('Given')
            failure: |
                I don't see a `Given` in your scenario: you probably want one that starts the user on the "/" page.
        check_when:
            type: behat
            assertTrue: feature('registration.feature').getScenario(1).hasStepType('When')
            failure: |
                I don't see a `When` in your scenario: you definitely need some, like for clicking `Register`, filling out the fields and pressing the submit button.
        check_then:
            type: behat
            assertTrue: feature('registration.feature').getScenario(1).hasStepType('Then')
            failure: |
                I don't see a `Then` in your scenario: you need one that checks if the success message was shown.

scenarios_badscenariomc:
    question: |
        Check out the following scenario. What's wrong here?

        ```gherkin
        Scenario: Sending a message
          Given there is a "dr_dino@example.com" user in the database
          And I am logged in as "dr_dino@example.com"
          And I am on "/"
          When I click "Send Message"
          And I fill in the message box with "Hello everyone!"
          And I press "Send"
          Then a message from "dr_dino@example.com" should be sent
        ```
    explanation: |
        In `Given`, you *can* "play god" and do things like database setup that your
        user cannot do. That's its biggest purpose. But, it's also "ok" to take some
        user action - like logging in - when that user action really isn't central
        to what your scenario is really trying to do.

        The real problem is the `Then`: it is describing something that the user
        cannot see. What does it mean that the message "should be sent"? Unlike `Given`,
        we can't give the user super-powers here and allow them to "see" technical
        things, like messages being sent or database records being inserted. Instead,
        assert that the user sees a success message.
    features:
        multiple_choice:
            choices:
                a: Actually, this scenario is perfect!
                b: In `Given`, you can only do things that the user can do. So, you can't magically "add a user to the database"
                c: In `Given`, you can't take user action. Saying "I am logged in as" implies that the user will go to the login page and login. This is user action and so should be under `When`.
                d: In `Then`, the user cannot see that a "message should be sent". The user would see some sort of a message, like "Your message has been sent" and we should look for this.
            correct: d

# UsingBehat
# this is a TODO - it requires a terminal
#usingbehat_lsfeaturecoding:
#    question: |
#        Linus just told us about an edge case with the `ls` command:
#        it should *not* show files starting with a `.` by default.
#        To test for this, we've added two new scenarios that make sure
#        that a `.dino` file only shows up with the `-a` option.
#
#        Execute Behat from the command line, copy in the new step definition,
#        and then fill in the contents so that our scenario passes.
#    step: ~
#    files:
#        ls.feature: ~
#        features/bootstrap/FeatureContext.php:
#            read_only: true
#    features:
#        editor: ~
#        browser: ~
#    grading:
#        check_scenarios:
#            type: behat
#            assertTrue: feature('ls.feature').hasScenarios()
#            failure: "I don't see *any* scenarios. Make sure you added a `Scenario: <some title>` line for the scenario."
#        count_scenarios:
#            type: behat
#            assertFalse: feature('ls.feature').countScenarios() == 2
#            failure: Make sure to create only a *2* new scenarios.
#        check_first_scenario_title:
#            type: behat
#            assertFalse: feature('ls.feature').getScenario(1).getTitle() == ''
#            failure: Make sure to put a short title after your first scenario.
#        check_second_scenario_title:
#            type: behat
#            assertFalse: feature('ls.feature').getScenario(2).getTitle() == ''
#            failure: Make sure to put a short title after your second scenario
#        check_given_in_scenario_1:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(1).hasStep('Given')
#            failure: "I don't see a `Given` in your first scenario: you probably want one to have a hidden file starting with `.`."
#        check_when_in_scenario_1:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(1).hasStep('When')
#            failure: "I don't see a `When` in your first scenario: you definitely need some, like for running commands in the terminal."
#        check_then_in_scenario_1:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(1).hasStep('Then')
#            failure: "I don't see a `Then` in your first scenario: you probably want one where you check if the success message was shown."
#        check_given_in_scenario_2:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(2).hasStep('Given')
#            failure: "I don't see a `Given` in your second scenario: you probably want one to have a hidden file starting with `.`."
#        check_when_in_scenario_2:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(2).hasStep('When')
#            failure: "I don't see a `When` in your second scenario: you definitely need some, like for running commands in the terminal."
#        check_then_in_scenario_2:
#            type: behat
#            assertTrue: feature('registration.feature').getScenario(2).hasStep('Then')
#            failure: "I don't see a `Then` in your second scenario: you probably want one where you check if the success message was shown."

usingbehat_independentscenariosmc:
    question: |
        The intern Bob is writing some scenarios that describe
        the behavior of the account area of our paleontology app.
        Do you see any problems with these two scenarios?

        ```gherkin
        Scenario: Register
          Given I am on "/"
          When I fill in "email" with "dr_dino@example.com"
          And I fill in "password" with "roar"
          And I press "Register"
          Then I should see "You're registered!"

        Scenario: View my account area
          Given I am on "/login"
          When I fill in "email" with "dr_dino@example.com"
          And I fill in "password" with "roar"
          And I press "Login"
          And I click "My Account"
          Then I should see "My Account Information"
        ```
    explanation: |
        Each scenario should act completely independent of other scenarios.
        Right now, in order for scenario 2 to pass, you *must* run scenario 1
        first. This makes your scenarios very fragile and difficult to debug.

        Instead, the second scenario should make sure that the `dr_dino@example.com`
        user is in the database via a `Given` statement. We'll talk more about
        how to do this soon.
    features:
        multiple_choice:
            choices:
                a: |
                    The second scenario shouldn't start on `/login`, it should start
                    on `/` and then you should click a "Login" link.
                b: |
                    Scenario 2 uses the `dr_dino@example.com` user from scenario 1,
                    but each scenario should act completely independent of each other.
                c: |
                    The second scenario shouldn't need to repeat the email address
                    and password, since it is already in the first scenario.
            correct: b

# BehatHooksBackground
behathooksbackground_afterstephookcoding:
    question: |
        You can hook into the Behat process and perform some action
        after *every* scenario or even after every individual
        step in a scenario.

        As a challenge, create a new function that is called after *every*
        individual step in a scenario.

        ***TIP
        See [hooking into the test process](http://docs.behat.org/en/v3.0/guides/3.hooks.html)
        for the annotation needed to do things after every step.
        ***
    question_steps:
        - Create a new function called `afterStepHook()`
        - Add an annotation so that this method is called after *every* individual step in a scenario
        - Inside of the method, just execute `var_dump('After Step!');`
    step: behat-hooks-background-afterstep-hook
    files:
        features/bootstrap/FeatureContext.php: ~
        ls.feature:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: /grade.php
            visible: false
    grading:
        check_method:
            type: php
            assertTrue: class('FeatureContext').hasMethod('afterStepHook')
            failure: The `afterStepHook()` method wasn't found in the `FeatureContext` class.
        check_method_is_public:
            type: php
            assertTrue: class('FeatureContext').getMethod('afterStepHook').isPublic()
            failure: The `afterStepHook()` method should be public.
        assert_doc_comment:
            type: php
            assertTrue: "class('FeatureContext').getMethod('afterStepHook').hasAnnotation('@AfterStep')"
            failure: You should add the `@AfterStep` annotation above the `afterStepHook()` method.

# todo - isn't good enough until we have a terminal
#behathooksbackground_checksteptestresultcoding:
#    question: |
#        Whenever you have a hook function, Behat passes you an `$event`
#        argument that contains information about what's happening inside Behat
#        at this moment. The exact object depends on which hook you're using
#        (see [Behat Hooks](http://docs.behat.org/en/v3.0/guides/3.hooks.html#hooks)).
#
#        In `afterStepHook()`, add an `$event` argument and use it to figure out
#        if the step that was just executed passed or failed. Replace `var_dump('After Step!')`
#        with `var_dump($isPassed)` where `$isPassed` is equal to whether or not
#        the previous step passed/failed.
#    step: behat-hooks-background-afterstep-hook-solution
#    files:
#        features/bootstrap/FeatureContext.php: ~
#        ls.feature:
#            read_only: true
#    features:
#        editor: ~
#        browser:
#            default_uri: /grade.php
#            visible: false
#    grading:
#        check_method:
#            type: php
#            assertTrue: reflection_class('FeatureContext').hasMethod('afterStepHook')
#            failure: The `afterStepHook()` method wasn't found in the `FeatureContext` class.
#        check_method_is_public:
#            type: php
#            assertTrue: reflection_class('FeatureContext').getMethod('afterStepHook').isPublic()
#            failure: The `afterStepHook()` method should be public.
#        assert_doc_comment:
#            type: php
#            assertTrue: reflection_class('FeatureContext').getMethod('afterStepHook').getDocComment() matches /@AfterStep/
#            failure: You should to use `@AfterStep` annotation for `afterStepHook()` method.
#        assert_number_of_required_parameters:
#            type: php
#            assertTrue: reflection_class('FeatureContext').getMethod('afterStepHook').getNumberOfRequiredParameters() == 1
#            failure: Make sure you give the `afterStepHook()` method exactly one argument.
#        assert_parameter_name:
#            type: php
#            assertTrue: reflection_class('FeatureContext').getMethod('afterStepHook').getParameters()[0]->getName() == 'event'
#            failure: Though you can really call it anything, let's call the argument to `afterStepHook()` `$event` for clarity.
